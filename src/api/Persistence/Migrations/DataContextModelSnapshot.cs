// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityType");

                    b.Property<string>("Category");

                    b.Property<string>("City");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("PropertyId");

                    b.Property<string>("Title");

                    b.Property<string>("Venue");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Domain.Agency", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgencyCompanyId");

                    b.Property<string>("AgencyCompanyName");

                    b.Property<string>("AgencyOfficeName");

                    b.Property<string>("Locality");

                    b.Property<string>("LogoImageUrl");

                    b.Property<string>("PostCode");

                    b.HasKey("Id");

                    b.HasIndex("AgencyCompanyId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Domain.AgencyCompany", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandColor");

                    b.Property<string>("LogoImageUrl");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AgencyCompanies");
                });

            modelBuilder.Entity("Domain.Agent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgencyId");

                    b.Property<string>("AppUserId");

                    b.Property<string>("LicenceNumber");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActivityId");

                    b.Property<string>("AuthorId");

                    b.Property<string>("Body");

                    b.Property<DateTime>("CreatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<bool>("Outdoor");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AgencyId");

                    b.Property<string>("Bio");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppUserId");

                    b.Property<string>("CreatedById");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("ImageUrl")
                        .IsRequired();

                    b.Property<bool>("IsMain");

                    b.Property<string>("PropertyId");

                    b.Property<string>("ThumbnailUrl");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Listing", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("AgencyId");

                    b.Property<string>("AgentId");

                    b.Property<string>("AppUserId");

                    b.Property<DateTimeOffset>("DateCreated");

                    b.Property<DateTimeOffset>("DateListingExpires");

                    b.Property<bool>("IsListedByAgent");

                    b.Property<bool>("IsPremium");

                    b.Property<bool>("IsPrivateSeller");

                    b.Property<string>("ListingType");

                    b.Property<decimal>("Price");

                    b.Property<string>("PropertyId");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("AgentId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("Domain.PostCode", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DeliveryCentre");

                    b.Property<string>("Lat");

                    b.Property<string>("Locality");

                    b.Property<string>("Long");

                    b.Property<string>("State");

                    b.Property<string>("Status");

                    b.Property<string>("Suburb");

                    b.Property<string>("Type");

                    b.HasKey("Code");

                    b.ToTable("PostCodes");
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdministrativeAreaLevel1");

                    b.Property<string>("AdministrativeAreaLevel2");

                    b.Property<string>("AgentId");

                    b.Property<DateTimeOffset>("AvailableDate");

                    b.Property<int>("Bathrooms");

                    b.Property<int>("Bedrooms");

                    b.Property<decimal>("BuyPrice");

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<string>("CreatedById")
                        .IsRequired();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsForAuction");

                    b.Property<bool>("IsForRent");

                    b.Property<bool>("IsForSale");

                    b.Property<decimal>("LandSize");

                    b.Property<string>("Locality");

                    b.Property<string>("MainImage");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ParkingSpaces");

                    b.Property<string>("PostCode")
                        .IsRequired();

                    b.Property<int>("PropertyTypeId");

                    b.Property<decimal>("RentPrice");

                    b.Property<string>("Route");

                    b.Property<string>("ShortDescription");

                    b.Property<string>("Slug")
                        .IsRequired();

                    b.Property<string>("State");

                    b.Property<string>("StreetNumber");

                    b.Property<string>("Suburb");

                    b.Property<string>("SuburbSlug");

                    b.Property<string>("Thumbnail");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("PropertyTypeId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Domain.PropertyFeature", b =>
                {
                    b.Property<string>("PropertyId");

                    b.Property<int>("FeatureId");

                    b.HasKey("PropertyId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("PropertyFeatures");
                });

            modelBuilder.Entity("Domain.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");
                });

            modelBuilder.Entity("Domain.UserActivity", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<Guid>("ActivityId");

                    b.Property<DateTime>("DateJoined");

                    b.Property<bool>("IsHost");

                    b.HasKey("AppUserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("Domain.UserPermission", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<string>("PropertyId");

                    b.Property<string>("Relation");

                    b.Property<string>("Value");

                    b.HasKey("AppUserId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserPermission");
                });

            modelBuilder.Entity("Domain.UserProperty", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<string>("PropertyId");

                    b.Property<DateTime>("DateJoined");

                    b.Property<bool>("IsHost");

                    b.HasKey("AppUserId", "PropertyId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserProperties");
                });

            modelBuilder.Entity("Domain.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Activity", b =>
                {
                    b.HasOne("Domain.Property")
                        .WithMany("Activities")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("Domain.Agency", b =>
                {
                    b.HasOne("Domain.AgencyCompany", "AgencyCompany")
                        .WithMany("AgencyOffices")
                        .HasForeignKey("AgencyCompanyId");
                });

            modelBuilder.Entity("Domain.Agent", b =>
                {
                    b.HasOne("Domain.Agency", "Agency")
                        .WithMany("Agents")
                        .HasForeignKey("AgencyId");

                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithOne("Agent")
                        .HasForeignKey("Domain.Agent", "AppUserId");
                });

            modelBuilder.Entity("Domain.Comment", b =>
                {
                    b.HasOne("Domain.Activity", "Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Domain.Identity.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.HasOne("Domain.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Domain.Image", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany("Images")
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("Domain.Listing", b =>
                {
                    b.HasOne("Domain.Agency", "Agency")
                        .WithMany("Listings")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Agent", "Agent")
                        .WithMany("Listings")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("Listings")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Domain.Property", b =>
                {
                    b.HasOne("Domain.Agent")
                        .WithMany("Properties")
                        .HasForeignKey("AgentId");

                    b.HasOne("Domain.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.PropertyFeature", b =>
                {
                    b.HasOne("Domain.Feature", "Feature")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("PropertyFeatures")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UserActivity", b =>
                {
                    b.HasOne("Domain.Activity", "Activity")
                        .WithMany("UserActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany("UserActivities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UserPermission", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany("UserPermissions")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.UserProperty", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", "AppUser")
                        .WithMany("UserProperties")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Property", "Property")
                        .WithMany("UserProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
